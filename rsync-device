#!/usr/bin/perl


use strict;
#use Digest::MD5 qw(md5_base64);
use String::CRC32;
use BerkeleyDB;
use Getopt::Long;
use File::Sync qw(fsync sync);

# options - source dest
sub show_help {

print
"Copy a device or file from one location to another, only copying the 
changed areas. Checksums can be cached in a file to allow for faster backups.
It is like rsync, but works with devices rather than files (like /dev/sda2)
  
  Usage: ( Options must preceed files/devices. )
  
     $0 [--sums /database.db] [-start 1234|/checkpoint.file] 
     [--block NUM] [--savecp /file] [-nv] <original> <backup>
     
     $0 --checkonly --sums /database.db [-nv] <backup>
  
  Options:
    
  --sums FILE   File to save of the checksums of backup device/file.
                If omitted, checksums are not saved.
                These files can be gigabytes in size.
  
  --block NUM   Specify a different block size (default 4096)
             
  --start NUM|FILE   Start at this block (use if it crashes)
                     or specify checkpoint file
  
  --savecp FILE Save checkpoints to this file rather than a tmp file
  
  --save-every NUM  Save (Checkpoint) data every NUM blocks of data
  
             	 
  --checkonly   Just check the backup device/file. A checksum file (--save)
                must be provided, and only one backup can be specified.
                Check size is ignored, as the checksum file has the
                needed size in it.
  
  -v|--verbose  Show verbose messages
   
  -h|--help     Show this help message

";
  if (@ARGV > -1 ) {
	print "\nError: " . shift . "\n";
  }
    exit;
}

sub errout {
	if (@ARGV > -1) {
		print shift . "\n";
	}
	print "Program exited due to error.\n";
	exit 1;
}

# how many blocks do we do at once?
my $blocks_at_once=8;

# get options
my ($original, $backup);
my $help = '';
my $verbose = '';
my $block_size=4096 * $blocks_at_once;
my $checkonly='';
my $verify='';
my $start_place=1;
# check and save every 100000 blocks (400M)
my $save_every=100000;
my ($checksums_file, $checkpoint_file) = '';
Getopt::Long::Configure ('bundling');
if ( @ARGV > 0 ) {
  GetOptions (
   's|sums=s' => \$checksums_file, 
   'b|block=i' => \$block_size,
   'start=s' => \$start_place,
   'savecp=s' => \$checkpoint_file,
   'save-every=i' => \$save_every,
   'checkonly' => \$checkonly,
   'verify' => \$verify,
   'v|verbose!' => \$verbose,
   'quiet'   => sub { $verbose = 0 },
   'h|help|?' => \$help
  );
}
else {
	show_help("No options given. This program requires options.");
}
show_help() if ( $help );

# get original and backup paths
if ( $checkonly ) {
	show_help if ( @ARGV == 0 );
	$backup=shift;
	# sanity checks
	if ( not $checksums_file ) {
		show_help("You must specify a checksums file");
	}
}
else {
	if ( $#ARGV != 1 ) {
		show_help("You must specify an original and backup location");
	}
	$original=shift;
	$backup=shift;
	# sanity checks
	if ( not $checksums_file ) {
		show_help("You must specify a checksums file");
	}
	# do they exist?
	if ( not -e $original ) {
		errout("Cannot find $original") ;
	}
	if ( not -e $backup ){
		errout("Cannot find $backup");
	}
		
	

	
}	
	
	print $original . ' -> ' . $backup . "\n";
	foreach (@ARGV) {
		print $_ . "\n";
	}

#exit;

# prompt (are you sure?)
# override with -y

my $cache_count=0;

if ( $checkpoint_file ) {
	open(chk,'>',$checkpoint_file) || die "failed to open checkpoint file $checkpoint_file: $!";
	chk->autoflush(1);
	print chk "Start\n";
}

open(orig,$original) or die "Failed to open original: $original: $!";
binmode(orig);

open(back,'+<',$backup) or die "Failed to open backup: $backup: $!";
binmode(back);

my %backup_block_hashes ;
my $db = tie %backup_block_hashes, 'BerkeleyDB::Btree',
            -Filename   => $checksums_file,
            -Flags      => DB_CREATE
            or die "Cannot open checksums file $checksums_file: $! $BerkeleyDB::Error\n" ;

# Add a key/value pair to the file

#$backup_block_hashes{1} = 456345;

# check/save block size
if (exists $backup_block_hashes{0}) {
	if ( $backup_block_hashes{0} != $block_size ) {
		errout("The saved block size ". $backup_block_hashes{0} . 
		" and your desired block size $block_size do not match\n".
		"Cannot continue with the current settings\n");
	}
}
else {
	$backup_block_hashes{0} = $block_size;
}

sub do_cleanup {
	my $sig=shift;
	print "Syncing and closing\n";
	$db->db_sync();
	fsync(\*back) or die "fsync: $!";
	system("sync");
	close(back);
	if ( $sig eq "INT" or $sig eq "HUP" or $sig eq "TERM" or $sig eq "ALRM" ) {
        print "Exited due to user direction.\n";
        exit 1;
    }
    print "Successfully copied device\n";
    exit 0;
}	

# trap signals
$SIG{INT}  = \&do_cleanup;
$SIG{HUP}  = \&do_cleanup;
$SIG{TERM} = \&do_cleanup;
$SIG{ALRM} = \&do_cleanup;


# start matching
my $x=$start_place;
my ($n, $data, $digest);
my ( $backup_data, $backup_digest);
my $added=0;
my $changed=0;
my $rewrote=0;
my %cached_changed_blocks=();
# my %cached_database_updates=();
my $current_added=0;
my $current_changed=0;
my $current_rewrote=0;
my $backup_seek_pos=0;
my $speed_start_time=time;
my $speed_start_time_current_pass=time;
my $verified_blocks=0;
my $saved_digest=0;

seek(orig,($x * $block_size) - $block_size,0);
while (($n = read orig, $data, $block_size) != 0) { 
	# print "$n bytes read\n";
	# $buf .= $data;
#	$digest = md5_base64($data);
	$digest = crc32($data);
#	print save $digest . "\n";
	# get value, so we don't have to keep looking it up
	#$saved_digest=$backup_block_hashes{0};
	#if ( $saved_digest eq '' ) {
	#	print "undef\n";
	#}
	#print $saved_digest . "\n";
	#exit 1;
	if ( not exists $backup_block_hashes{$x} ) {
		$saved_digest=0;
	}
	else {
		$saved_digest=$backup_block_hashes{$x};
	}
	if ( $verify or $saved_digest != $digest) { 
		# this will also be the checkonly one
#		if ( $backup_seek_pos != $x ) {
			#print "seeked to $x\n";
			seek(back,($x * $block_size) - $block_size,0);
#			$backup_seek_pos=$x;
#		}
		read(back, $backup_data, $block_size);
#		$backup_seek_pos++;
		$backup_digest = crc32($backup_data);
		# print "changed from $backup_block_hashes{$x} at $x: $digest - $backup_digest\n";
		$changed++;
		$current_changed++;
		if ( $digest != $backup_digest ) {
			
			# update backup block
			# write
			# print "chksum and wrote $x\n";$rewrote++;
			$rewrote++;
			$current_rewrote++;
#			if ( $backup_seek_pos != $x ) {
				#print "seeked to $x\n";
				seek(back,($x * $block_size) - $block_size,0);
#				$backup_seek_pos=$x;
#			}
			print back $data;
#			$backup_seek_pos++;
			
			# save digest to database
			# add to cached list to verify (because we wrote to them)
			$cached_changed_blocks{$x}=$digest;
			$cache_count++;
		
		}
		else {
			# blocks match
			if ( $saved_digest != $digest ) {
				# just update database
				# print "only added chksum $x!\n";
				# no verification needed
				$backup_block_hashes{$x}=$digest;
				$added++;
				$current_added++;
			}
			
		}
		if ( $verify ) {
			$verified_blocks++;
		}
	}
	
	# save database only every $save_every (and verify it)
	if ( $x % $save_every == 0 and $x - $start_place >= $save_every ) {
			
			# send backup data to the platter for verification
			fsync(\*back) or die "fsync: $!";
			
			# block changes that need verification
			foreach (sort keys %cached_changed_blocks) {
				my $b=$_;
#				if ( $backup_seek_pos != $b ) {
					#print "seeked to $b\n";
					seek(back,($b * $block_size) - $block_size,0);
#					$backup_seek_pos=$b;
#				}
				read(back, $backup_data, $block_size);
#				$backup_seek_pos++;
				$backup_digest = crc32($backup_data);
				if ( $backup_digest != $cached_changed_blocks{$b} ) {
					print "Block $b failed to write properly. Exiting.\n";
					exit 1;
					# todo: try to rewite and fix
				}
				$backup_block_hashes{$b} = $cached_changed_blocks{$b};
				$verified_blocks++;
			}
			
			# sync
			#system("sync");
			#print "sync\n";
			$db->db_sync();
			fsync(\*back) or die "fsync: $!";
			#fsync(\*chk) or die "fsync: $!";
			# done checking and saving
			# reset counter
			$cache_count=0;
			%cached_changed_blocks=();
			
			# print stats
			print "Chkpnt block $x: " . sprintf("%.2f", $x * $block_size / 1024 / 1024 / 1024 ) . "G, ".
				(int($current_changed/$save_every*100)) .
				"% checked, $current_rewrote/$verified_blocks/$rewrote (".
				(int($current_rewrote/$save_every*100)) .
				"%) rewrites, $current_added/$added (".
				(int($current_added/$save_every*100)) .
				"%) db only, ";
			
			# write to checkpoint file (hot write)
			if ( $checkpoint_file ) {
				print chk "Checkpoint: $x blocks, $changed changes, $rewrote rewrites, $added database only\n";
			}
			$current_added=0;
			$current_changed=0;
			$current_rewrote=0;
			$verified_blocks=0;
			# print disk speeds
			print int(($save_every * $block_size / 1024 / 1024 ) / (time - $speed_start_time_current_pass + 1)) . " Mb/s (";
			$speed_start_time_current_pass=time;
			print int((($x - $start_place) * $block_size / 1024 /1024 ) / (time - $speed_start_time +1)) . " Mb/s avg)\n";
		
	}
#	elsif ( $x % $save_every == 0 ) {
#		# if it's checking all blocks, we dont need to show this
#		print "Chkpnt block $x, ";
#		if ( $checkpoint_file ) {
#			print chk "Checkpoint: $x blocks, $changed changes, $rewrote rewrites, $added database only\n";
#		}
#		print int((($x - $start_place) * $block_size / 1024 /1024 ) / (time - $speed_start_time +1)) . " Mb/s\n";
#		# sync
#		#system("sync");
#		#print "sync\n";
#		$db->db_sync();
#		fsync(\*back) or die "fsync: $!";
#		#fsync(\*chk) or die "fsync: $!";
#	}
	$x++;
#	exit;
}

# finish writing changed blocks
print $cache_count . "\n";
if ( $cache_count > 0 ) {
	fsync(\*back) or die "fsync: $!";
	foreach (sort keys %cached_changed_blocks) {
		my $b=$_;
		seek(back,($b * $block_size) - $block_size,0);
		read(back, $backup_data, $block_size);
		$backup_digest = crc32($backup_data);
		if ( $backup_digest != $cached_changed_blocks{$b} ) {
			print "Block $b failed to write properly. Exiting.\n";
			exit 1;
			# todo: try to rewite and fix
		}
		$backup_block_hashes{$b} = $cached_changed_blocks{$b};
	}
	# sync
	$db->db_sync();
	fsync(\*back) or die "fsync: $!";
}
$x--;
my $total_checked=$x-$start_place;
print "All done\n";
print "Total of $x blocks on device\n";
print $changed . " checked (".int($changed/$total_checked*100)."%)\n";
print $rewrote . " rewrites to backup drive (".int($rewrote/$total_checked*100)."%)\n";
print $added . " database only updates (".int($added/$total_checked*100)."%)\n";
print "Speed was " . int((($x - $start_place) * $block_size / 1024 /1024 ) / (time - $speed_start_time +1)) . " Mb/s\n";

if ( $checkpoint_file ) {
	print chk "Finished: $x blocks, $changed changes, $rewrote rewrites, $added times only checksum was added\n";
}

close(orig);
do_cleanup();

